
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['administrateur', 'founder'];
    }

    // --- User Profiles ---
    match /users/{userId} {
      // Anyone can read a user's public profile
      allow read;
      // Only the user themselves can update their profile
      allow write: if isOwner(userId);

       // Users can access their own cart
      match /cart/{cartId} {
        allow read, write, delete: if isOwner(userId);
      }
    }

    // --- Notifications ---
    match /notifications/{notificationId} {
      // User can read, update (mark as read), and delete their own notifications.
      allow read, write, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
      // Admins can create notifications (not implemented yet, but good to have)
      allow create: if isAdmin();
    }

    // --- Public Content (Posts, Annonces, Products, etc.) ---
    match /posts/{postId} {
      allow read;
      allow create, update, delete: if isAuthenticated() && (request.resource.data.authorId == request.auth.uid || isAdmin());
      
      match /comments/{commentId} {
        allow read;
        allow create: if isAuthenticated();
      }
    }

    match /services/{serviceId} {
      allow read;
      allow create, update, delete: if isAuthenticated() && (request.resource.data.createdBy == request.auth.uid || isAdmin());
      
      match /reviews/{reviewId} {
          allow read;
          allow create: if isAuthenticated();
      }
    }

    match /products/{productId} {
      allow read;
      allow create, update, delete: if isAuthenticated() && (request.resource.data.createdBy == request.auth.uid || isAdmin());
    }

     match /blog/{articleId} {
      allow read;
      allow create, update, delete: if isAuthenticated() && (request.resource.data.authorId == request.auth.uid || isAdmin());
    }

    // --- Live Sessions ---
    match /lives/{liveId} {
        allow read, write; // Open for now for signaling and status updates
    }


    // --- Private/Scoped data ---
    match /wallets/{userId} {
        allow read, write: if isOwner(userId) || isAdmin();
        
        match /transactions/{transactionId} {
            allow read, write: if isOwner(userId) || isAdmin();
        }
    }
    
    match /messages/{messageId} {
        allow read, write: if isAuthenticated() && (request.resource.data.senderId == request.auth.uid || request.resource.data.receiverId == request.auth.uid);
        allow create: if isAuthenticated();
    }

     match /reservations/{reservationId} {
        allow read, write: if isAuthenticated() && (request.resource.data.memberId == request.auth.uid || request.resource.data.creatorId == request.auth.uid);
    }
    
    match /purchases/{purchaseId} {
        allow read: if isAuthenticated() && request.resource.data.memberId == request.auth.uid;
    }


    // --- Admin & System collections ---
    match /partnerRequests/{requestId} {
        allow read: if isAdmin();
        allow create; // Anyone can create a request
        allow update: if isAdmin();
    }
    
    match /supportTickets/{ticketId} {
        allow create: if isAuthenticated();
        allow read, write: if isAdmin() || (isAuthenticated() && resource.data.userId == request.auth.uid);
    }

    match /settings/global {
        allow read;
        allow write: if isAdmin();
    }

     match /calls/{callId} {
        allow read, write: if isAuthenticated();
    }
  }
}
