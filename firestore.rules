rules_version = '2';

// Helper functions to be used in security rules
function isAuthenticated() {
  return request.auth != null;
}

function isOwner(userId) {
  return isAuthenticated() && request.auth.uid == userId;
}

function isAdmin() {
  return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['administrateur', 'founder'];
}

function isModerator() {
  return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['administrateur', 'founder', 'moderator'];
}

function isCreatorOrPartner() {
    return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['escorte', 'partenaire'];
}

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Reusable Rules for Content ---
    function contentReadRules() {
      return resource.data.moderationStatus == 'approved' || isOwner(resource.data.createdBy) || isAdmin();
    }
    function contentWriteRules() {
      return (isOwner(request.resource.data.createdBy) && request.resource.data.isSponsored == false) || isAdmin();
    }
    
    // Users:
    // read: Anyone can read public profiles.
    // update: Only the owner can update their own profile. Admin can also update.
    // create, delete: Not allowed directly. Handled by backend/auth functions.
    match /users/{userId} {
      allow read: if true;
      allow update: if isOwner(userId) || isAdmin();
      allow create, delete: if false;
      
      // Cart: Only the owner can access their own cart.
      match /cart/{productId} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // Wallets:
    // read: Only the owner or an admin can read wallet details.
    // write: Only backend services can modify wallets.
    match /wallets/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if false;

      // Transactions:
      // read: Owner or admin.
      // create: Backend only.
      // update, delete: Not allowed.
      match /transactions/{transactionId} {
        allow read: if isOwner(userId) || isAdmin();
        allow create: if false;
        allow update, delete: if false;
      }
    }
    
    // Global Settings:
    // read: Any authenticated user can read settings.
    // write: Only founder/admin can write.
    match /settings/global {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Posts:
    // list: Anyone can list approved posts.
    // read: Anyone can read approved posts.
    // create: Authenticated users can create posts.
    // update: Only the author can update their post.
    // delete: Only the author or an admin can delete a post.
    match /posts/{postId} {
      allow list: if query.limit <= 30;
      allow read: if resource.data.moderationStatus == 'approved';
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && request.resource.data.authorId == request.auth.uid;
      allow delete: if (isAuthenticated() && resource.data.authorId == request.auth.uid) || isAdmin();
      
      // Comments:
      // read: Anyone can read comments on a public post.
      // create: Any authenticated user can comment.
      // delete: Only the comment author, post author, or admin can delete.
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow delete: if (isAuthenticated() && resource.data.authorId == request.auth.uid) || isAdmin() || get(parent).data.authorId == request.auth.uid;
      }
    }
    
    // Products & Services:
    // read: Anyone can read approved content.
    // create: Only creators/partners can create.
    // update: Only owner or admin can update.
    // delete: Only owner or admin can delete.
    match /products/{productId} {
        allow read: if contentReadRules();
        allow create: if isCreatorOrPartner();
        allow update: if contentWriteRules();
        allow delete: if isOwner(resource.data.createdBy) || isAdmin();
    }

    match /services/{serviceId} {
        allow read: if contentReadRules();
        allow create: if isCreatorOrPartner();
        allow update: if contentWriteRules();
        allow delete: if isOwner(resource.data.createdBy) || isAdmin();
        
        // Reviews on services
        match /reviews/{reviewId} {
            allow read: if true;
            allow create: if isAuthenticated();
        }
    }
    
    // Blog articles
    match /blog/{articleId} {
        allow read: if true;
        allow create, update, delete: if isCreatorOrPartner() || isAdmin();
    }
    
    // Messages:
    // Only sender or receiver can read/write.
    match /messages/{messageId} {
      allow read, create: if isAuthenticated() && (request.auth.uid == resource.data.senderId || request.auth.uid == resource.data.receiverId);
      allow update, delete: if false; // No editing/deleting messages
    }
    
    // Notifications:
    // list: Can list their own notifications.
    // get: Can get a single one of their notifications.
    // write: Can update their own notifications (e.g., mark as read).
    match /notifications/{notificationId} {
      allow list: if isAuthenticated() && request.query.where.userId == request.auth.uid;
      allow get, write: if isOwner(resource.data.userId);
    }
    
    // Calls:
    // create: Any authenticated user can initiate a call.
    // read, update: Only participants can access call data.
    match /calls/{callId} {
        allow create: if isAuthenticated();
        allow read, update: if isAuthenticated() && (request.auth.uid == resource.data.callerId || request.auth.uid == resource.data.receiverId);
    }
    
    // Reservations
    // create: Authenticated users can create.
    // read, update: Only participants (member, creator, invited escorts) or admin can access.
    match /reservations/{reservationId} {
        allow create: if isAuthenticated();
        allow read, update: if (isAuthenticated() && (
                                request.auth.uid == resource.data.memberId ||
                                request.auth.uid == resource.data.creatorId ||
                                (resource.data.escorts != null && resource.data.escorts.filter(e => e.id == request.auth.uid).size() > 0)
                               )) || isAdmin();
    }
    
    // Purchases
    // create: Backend only.
    // read: Only the member or seller can read.
    match /purchases/{purchaseId} {
        allow create: if false;
        allow read: if isAuthenticated() && (request.auth.uid == resource.data.memberId || request.auth.uid == resource.data.sellerId);
    }
    
    // Partner Requests:
    // create: Anyone can submit.
    // read, update: Only admins.
    match /partnerRequests/{requestId} {
        allow create: if true;
        allow read, update: if isAdmin();
    }

    // Support Tickets
    match /supportTickets/{ticketId} {
        allow create: if isAuthenticated();
        allow read, update: if isOwner(resource.data.userId) || isModerator();
    }
    
    // Verification data (future use)
    match /verifications/{userId} {
      allow read, write: if isOwner(userId) || isAdmin();
    }
  }
}
