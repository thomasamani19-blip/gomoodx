
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['founder', 'administrateur'];
    }

    function isCreatorOrPartner() {
      let role = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      return isSignedIn() && (role == 'escorte' || role == 'partenaire');
    }

    // --- USERS ---
    match /users/{userId} {
      allow get, list: if true; // Allow public read (get and list)
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if false;
    }

    // --- POSTS ---
    match /posts/{postId} {
      allow get, list: if true; // Allow public read
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if resource.data.authorId == request.auth.uid || isAdmin();

      // Comments subcollection
      match /comments/{commentId} {
        allow get, list: if isSignedIn(); // Logged-in users can read comments
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow update, delete: if resource.data.authorId == request.auth.uid || isAdmin();
      }
    }

    // --- SERVICES (Annonces) & PRODUCTS ---
    match /services/{contentId} {
        allow get, list: if true; // Allow public read
        allow create: if isCreatorOrPartner() && request.resource.data.createdBy == request.auth.uid;
        allow update, delete: if resource.data.createdBy == request.auth.uid || isAdmin();
        
        match /reviews/{reviewId} {
            allow get, list: if isSignedIn();
            allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
            allow delete: if resource.data.authorId == request.auth.uid || isAdmin();
        }
    }
    
    match /products/{contentId} {
        allow get, list: if true; // Allow public read
        allow create: if isCreatorOrPartner() && request.resource.data.createdBy == request.auth.uid;
        allow update, delete: if resource.data.createdBy == request.auth.uid || isAdmin();
    }
    
    // --- BLOG & LIVES ---
    match /blog/{articleId} {
        allow get, list: if true; // Allow public read
        allow create: if (isCreatorOrPartner() || isAdmin()) && request.resource.data.authorId == request.auth.uid;
        allow update, delete: if resource.data.authorId == request.auth.uid || isAdmin();
    }
    match /lives/{liveId} {
        allow get, list: if true; // Allow public read
        allow create: if (isCreatorOrPartner() || isAdmin()) && request.resource.data.hostId == request.auth.uid;
        allow update, delete: if resource.data.hostId == request.auth.uid || isAdmin();
    }

    // --- WALLETS & TRANSACTIONS ---
    match /wallets/{userId} {
      allow read, update: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);

      match /transactions/{transactionId} {
        allow read, write: if isOwner(userId) || isAdmin();
      }
    }
    
    // --- PURCHASES & RESERVATIONS ---
    match /reservations/{reservationId} {
        allow read, update: if isSignedIn() && (resource.data.memberId == request.auth.uid || resource.data.creatorId == request.auth.uid || request.auth.uid in resource.data.escorts);
        allow create: if isSignedIn() && request.resource.data.memberId == request.auth.uid;
        allow delete: if isAdmin();
    }
    match /purchases/{purchaseId} {
        allow read: if isSignedIn() && (resource.data.memberId == request.auth.uid || resource.data.sellerId == request.auth.uid);
        allow create: if isSignedIn() && request.resource.data.memberId == request.auth.uid;
        allow delete: if isAdmin();
    }
    
    // --- USER-SPECIFIC SUBCOLLECTIONS (e.g., CART) ---
    match /users/{userId}/cart/{itemId} {
        allow read, write: if isOwner(userId);
    }

    // --- MESSAGES & CALLS ---
    match /messages/{messageId} {
        allow read: if isSignedIn() && (resource.data.senderId == request.auth.uid || resource.data.receiverId == request.auth.uid);
        allow write: if isSignedIn() && (request.resource.data.senderId == request.auth.uid || resource.data.senderId == request.auth.uid);
    }
    match /calls/{callId} {
        allow read, write: if isSignedIn() && (request.resource.data.callerId == request.auth.uid || resource.data.callerId == request.auth.uid || request.resource.data.receiverId == request.auth.uid || resource.data.receiverId == request.auth.uid);
        
        match /{candidateCollection}/{candidateId} {
            allow create: if isSignedIn();
        }
    }
    
    // --- NOTIFICATIONS ---
    match /notifications/{notificationId} {
        allow read, write: if isSignedIn() && (resource.data.userId == request.auth.uid || request.resource.data.userId == request.auth.uid);
    }

    // --- ADMIN-ONLY COLLECTIONS ---
    match /partnerRequests/{requestId} {
        allow read, update: if isAdmin();
        allow create: if true; // Anyone can submit a request
    }
    match /supportTickets/{ticketId} {
        allow read, write: if isSignedIn() && (resource.data.userId == request.auth.uid || isAdmin());
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }
    match /verifications/{userId} {
        allow read, write: if isOwner(userId) || isAdmin();
    }
    
    // --- GLOBAL SETTINGS ---
    match /settings/global {
        allow read: if true;
        allow write: if isAdmin();
    }
  }
}
