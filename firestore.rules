rules_version = '2';

// Helper functions to be used in security rules
function isAuthenticated() {
  return request.auth != null;
}

function isOwner(userId) {
  return isAuthenticated() && request.auth.uid == userId;
}

function isAdmin() {
  return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['administrateur', 'founder'];
}

function isModerator() {
  return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['administrateur', 'founder', 'moderator'];
}

function isCreatorOrPartner() {
    return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['escorte', 'partenaire'];
}

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Reusable Rules for Content ---
    function isPubliclyVisible() {
      return resource.data.moderationStatus == 'approved';
    }
    
    // Users:
    match /users/{userId} {
      allow read: if true;
      allow update: if isOwner(userId) || isAdmin();
      allow create, delete: if false;
      
      match /cart/{productId} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // Wallets:
    match /wallets/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if false;

      match /transactions/{transactionId} {
        allow read: if isOwner(userId) || isAdmin();
        allow create, update, delete: if false;
      }
    }
    
    // Global Settings:
    match /settings/global {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Posts:
    match /posts/{postId} {
      allow list: if request.query.where.moderationStatus == 'approved';
      allow read: if isPubliclyVisible() || isOwner(resource.data.authorId) || isAdmin();
      allow create: if isAuthenticated();
      allow update: if isOwner(request.resource.data.authorId) || isAdmin();
      allow delete: if isOwner(resource.data.authorId) || isAdmin();
      
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow delete: if (isAuthenticated() && resource.data.authorId == request.auth.uid) || isAdmin() || get(parent).data.authorId == request.auth.uid;
      }
    }
    
    // Products & Services:
    match /products/{productId} {
        allow list: if request.query.where.moderationStatus == 'approved';
        allow read: if isPubliclyVisible() || isOwner(resource.data.createdBy) || isAdmin();
        allow create: if isCreatorOrPartner();
        allow update: if isOwner(request.resource.data.createdBy) || isAdmin();
        allow delete: if isOwner(resource.data.createdBy) || isAdmin();
    }

    match /services/{serviceId} {
        allow list: if request.query.where.moderationStatus == 'approved';
        allow read: if isPubliclyVisible() || isOwner(resource.data.createdBy) || isAdmin();
        allow create: if isCreatorOrPartner();
        allow update: if isOwner(request.resource.data.createdBy) || isAdmin();
        allow delete: if isOwner(resource.data.createdBy) || isAdmin();
        
        match /reviews/{reviewId} {
            allow read: if true;
            allow create: if isAuthenticated();
        }
    }
    
    // Blog articles
    match /blog/{articleId} {
        allow read: if true;
        allow create, update, delete: if isCreatorOrPartner() || isAdmin();
    }
    
    // Messages:
    match /messages/{messageId} {
      allow read, create: if isAuthenticated() && (request.auth.uid == resource.data.senderId || request.auth.uid == resource.data.receiverId);
      allow update, delete: if false;
    }
    
    // Notifications:
    match /notifications/{notificationId} {
      allow list: if isAuthenticated() && request.query.where.userId == request.auth.uid;
      allow get, write: if isOwner(resource.data.userId);
    }
    
    // Calls:
    match /calls/{callId} {
        allow create: if isAuthenticated();
        allow read, update: if isAuthenticated() && (request.auth.uid == resource.data.callerId || request.auth.uid == resource.data.receiverId);
    }
    
    // Reservations
    match /reservations/{reservationId} {
        allow create: if isAuthenticated();
        allow read, update: if (isAuthenticated() && (
                                request.auth.uid == resource.data.memberId ||
                                request.auth.uid == resource.data.creatorId ||
                                (resource.data.escorts != null && resource.data.escorts.hasAny(e => e.id == request.auth.uid))
                               )) || isAdmin();
    }
    
    // Purchases
    match /purchases/{purchaseId} {
        allow create: if false;
        allow read: if isAuthenticated() && (request.auth.uid == resource.data.memberId || request.auth.uid == resource.data.sellerId);
    }
    
    // Partner Requests:
    match /partnerRequests/{requestId} {
        allow create: if true;
        allow read, update: if isAdmin();
    }

    // Support Tickets
    match /supportTickets/{ticketId} {
        allow create: if isAuthenticated();
        allow read, update: if isOwner(resource.data.userId) || isModerator();
    }
    
    // Verification data (future use)
    match /verifications/{userId} {
      allow read, write: if isOwner(userId) || isAdmin();
    }
  }
}
