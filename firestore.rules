
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    function isSignedIn() {
      return request.auth != null;
    }
    function isAdmin() {
      // Check if the user document exists before trying to access its data.
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['founder', 'administrateur'];
    }
    function isModerator() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['moderator'];
    }
    function isCreator() {
       return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['escorte', 'partenaire'];
    }

    // Allow admins to read/write everything for easier management.
    match /{path=**} {
      allow read, write: if isAdmin();
    }

    // --- User Profiles ---
    match /users/{userId} {
      // Anyone can read a user's public profile.
      allow read: if isSignedIn();
      // Only the user can update their own profile.
      allow write: if isOwner(userId);
    }
    
    // --- Public Content (Posts, Products, Services, Blog) ---
    match /posts/{postId} {
      allow read: if isSignedIn();
      allow create: if isCreator() && isOwner(request.resource.data.authorId);
      allow update, delete: if isCreator() && isOwner(resource.data.authorId);
    }
    match /products/{productId} {
      allow read: if isSignedIn();
      allow create: if isCreator() && isOwner(request.resource.data.createdBy);
      allow update, delete: if isCreator() && isOwner(resource.data.createdBy);
    }
    match /services/{serviceId} {
      allow read: if isSignedIn();
      allow create: if isCreator() && isOwner(request.resource.data.createdBy);
      allow update, delete: if isCreator() && isOwner(resource.data.createdBy);
    }
    match /blog/{articleId} {
      allow read: if isSignedIn();
      allow create: if isCreator() && isOwner(request.resource.data.authorId);
      allow update, delete: if isCreator() && isOwner(resource.data.authorId);
    }
     match /lives/{liveId} {
      allow read: if isSignedIn();
      allow create: if isCreator() && isOwner(request.resource.data.hostId);
      allow update, delete: if isCreator() && isOwner(resource.data.hostId);
    }

    // --- User-specific subcollections (Cart, Transactions, Comments, Notifications) ---
    match /users/{userId}/cart/{cartItemId} {
        allow read, write: if isOwner(userId);
    }
     match /users/{userId}/transactions/{transactionId} {
        allow read, write: if isOwner(userId);
    }
     match /posts/{postId}/comments/{commentId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && isOwner(request.resource.data.authorId);
        allow delete: if isOwner(resource.data.authorId);
    }
    match /notifications/{notificationId} {
        allow read, update: if isOwner(resource.data.userId);
    }

    // --- Partner Requests & Verifications (Admin access is handled by global rule) ---
    match /partnerRequests/{requestId} {
        allow create: if true; // Anyone can submit a request.
        // Admin rules cover read/update.
    }
    
    // --- Other Collections ---
    match /reservations/{reservationId} {
        allow read, write: if isSignedIn(); // Simplified for now, should be more granular
    }
     match /messages/{messageId} {
        allow read, create: if isSignedIn() && (isOwner(request.resource.data.senderId) || isOwner(request.resource.data.receiverId));
    }
    match /calls/{callId} {
        allow read, create, update: if isSignedIn(); // Simplified for signaling
    }
    match /supportTickets/{ticketId} {
        allow create: if isSignedIn() && isOwner(request.resource.data.userId);
        // Admin rules cover read/update.
    }
  }
}
