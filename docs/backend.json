
{
  "entities": {
    "Membre": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Membre",
      "type": "object",
      "description": "Représente un membre (client) de l'application GoMoodX.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifiant unique du membre."
        },
        "nomUtilisateur": {
          "type": "string",
          "description": "Nom d'utilisateur du membre."
        },
        "email": {
          "type": "string",
          "description": "Adresse e-mail du membre.",
          "format": "email"
        },
        "languePreferee": {
          "type": "string",
          "description": "Langue préférée du membre (fr, en, es, it, ar)."
        },
        "dateInscription": {
          "type": "string",
          "description": "Date d'inscription du membre.",
          "format": "date-time"
        },
        "portefeuilleId": {
          "type": "string",
          "description": "Référence au Portefeuille du membre. (Relation: Membre 1:1 Portefeuille)"
        },
        "role": {
          "type": "string",
          "description": "Role du membre (client, escorte, partenaire, administrateur)."
        }
      },
      "required": [
        "id",
        "nomUtilisateur",
        "email",
        "languePreferee",
        "dateInscription",
        "portefeuilleId",
        "role"
      ]
    },
    "Escorte": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Escorte",
      "type": "object",
      "description": "Représente une escorte/créateur de contenu sur GoMoodX.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifiant unique de l'escorte."
        },
        "nomUtilisateur": {
          "type": "string",
          "description": "Nom d'utilisateur de l'escorte."
        },
        "email": {
          "type": "string",
          "description": "Adresse e-mail de l'escorte.",
          "format": "email"
        },
        "bio": {
          "type": "string",
          "description": "Biographie de l'escorte."
        },
        "languePreferee": {
          "type": "string",
          "description": "Langue préférée de l'escorte (fr, en, es, it, ar)."
        },
        "dateInscription": {
          "type": "string",
          "description": "Date d'inscription de l'escorte.",
          "format": "date-time"
        },
        "portefeuilleId": {
          "type": "string",
          "description": "Référence au Portefeuille de l'escorte. (Relation: Escorte 1:1 Portefeuille)"
        },
        "contenuPremiumIds": {
          "type": "array",
          "description": "Références aux Contenus Premium de l'escorte. (Relation: Escorte 1:N ContenuPremium)",
          "items": {
            "type": "string"
          }
        },
        "role": {
          "type": "string",
          "description": "Role de l'escorte (client, escorte, partenaire, administrateur)."
        }
      },
      "required": [
        "id",
        "nomUtilisateur",
        "email",
        "bio",
        "languePreferee",
        "dateInscription",
        "portefeuilleId",
        "role"
      ]
    },
    "Partenaire": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Partenaire",
      "type": "object",
      "description": "Représente un partenaire (hôtel, photographe, vidéaste) sur GoMoodX.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifiant unique du partenaire."
        },
        "nomEntreprise": {
          "type": "string",
          "description": "Nom de l'entreprise du partenaire."
        },
        "email": {
          "type": "string",
          "description": "Adresse e-mail du partenaire.",
          "format": "email"
        },
        "description": {
          "type": "string",
          "description": "Description de l'activité du partenaire."
        },
        "languePreferee": {
          "type": "string",
          "description": "Langue préférée du partenaire (fr, en, es, it, ar)."
        },
        "dateInscription": {
          "type": "string",
          "description": "Date d'inscription du partenaire.",
          "format": "date-time"
        },
        "portefeuilleId": {
          "type": "string",
          "description": "Référence au Portefeuille du partenaire. (Relation: Partenaire 1:1 Portefeuille)"
        },
        "produitIds": {
          "type": "array",
          "description": "Références aux Produits du partenaire. (Relation: Partenaire 1:N Produit)",
          "items": {
            "type": "string"
          }
        },
        "role": {
          "type": "string",
          "description": "Role du partenaire (client, escorte, partenaire, administrateur)."
        },
        "partnerType": {
            "type": "string",
            "description": "Type de partenaire (establishment, producer)"
        }
      },
      "required": [
        "id",
        "nomEntreprise",
        "email",
        "description",
        "languePreferee",
        "dateInscription",
        "portefeuilleId",
        "role",
        "partnerType"
      ]
    },
    "Administrateur": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Administrateur",
      "type": "object",
      "description": "Représente un administrateur de l'application GoMoodX.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifiant unique de l'administrateur."
        },
        "nomUtilisateur": {
          "type": "string",
          "description": "Nom d'utilisateur de l'administrateur."
        },
        "email": {
          "type": "string",
          "description": "Adresse e-mail de l'administrateur.",
          "format": "email"
        },
        "dateInscription": {
          "type": "string",
          "description": "Date d'inscription de l'administrateur.",
          "format": "date-time"
        },
        "role": {
          "type": "string",
          "description": "Role de l'administrateur (client, escorte, partenaire, administrateur)."
        }
      },
      "required": [
        "id",
        "nomUtilisateur",
        "email",
        "dateInscription",
        "role"
      ]
    },
    "Portefeuille": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Portefeuille",
      "type": "object",
      "description": "Représente le portefeuille virtuel d'un utilisateur.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifiant unique du portefeuille."
        },
        "solde": {
          "type": "number",
          "description": "Solde actuel du portefeuille."
        },
        "dateCreation": {
          "type": "string",
          "description": "Date de création du portefeuille.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "solde",
        "dateCreation"
      ]
    },
    "ContenuPremium": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ContenuPremium",
      "type": "object",
      "description": "Représente un contenu premium (photo, vidéo) vendu par une escorte.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifiant unique du contenu premium."
        },
        "escorteId": {
          "type": "string",
          "description": "Référence à l'Escorte qui a créé le contenu. (Relation: Escorte 1:N ContenuPremium)"
        },
        "titre": {
          "type": "string",
          "description": "Titre du contenu premium."
        },
        "description": {
          "type": "string",
          "description": "Description du contenu premium."
        },
        "type": {
          "type": "string",
          "description": "Type de contenu (photo, vidéo)."
        },
        "url": {
          "type": "string",
          "description": "URL du contenu premium.",
          "format": "uri"
        },
        "prix": {
          "type": "number",
          "description": "Prix du contenu premium."
        }
      },
      "required": [
        "id",
        "escorteId",
        "titre",
        "description",
        "type",
        "url",
        "prix"
      ]
    },
    "Produit": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Produit",
      "type": "object",
      "description": "Représente un produit vendu par un partenaire (hôtel, etc.).",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifiant unique du produit."
        },
        "partenaireId": {
          "type": "string",
          "description": "Référence au Partenaire qui vend le produit. (Relation: Partenaire 1:N Produit)"
        },
        "nom": {
          "type": "string",
          "description": "Nom du produit."
        },
        "description": {
          "type": "string",
          "description": "Description du produit."
        },
        "prix": {
          "type": "number",
          "description": "Prix du produit."
        },
        "imageURL": {
          "type": "string",
          "description": "URL de l'image du produit",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "partenaireId",
        "nom",
        "description",
        "prix",
        "imageURL"
      ]
    },
    "Reservation": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Reservation",
      "type": "object",
      "description": "Représente une réservation faite par un membre.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifiant unique de la réservation."
        },
        "membreId": {
          "type": "string",
          "description": "Référence au Membre qui a fait la réservation. (Relation: Membre 1:N Reservation)"
        },
        "produitId": {
          "type": "string",
          "description": "Référence au Produit réservé. (Relation: Produit 1:N Reservation)"
        },
        "dateDebut": {
          "type": "string",
          "description": "Date de début de la réservation.",
          "format": "date-time"
        },
        "dateFin": {
          "type": "string",
          "description": "Date de fin de la réservation.",
          "format": "date-time"
        },
        "statut": {
          "type": "string",
          "description": "Statut de la réservation (en attente, confirmée, annulée)."
        }
      },
      "required": [
        "id",
        "membreId",
        "produitId",
        "dateDebut",
        "dateFin",
        "statut"
      ]
    },
    "Message": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Message",
      "type": "object",
      "description": "Représente un message dans le système de messagerie privée.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifiant unique du message."
        },
        "expediteurId": {
          "type": "string",
          "description": "Référence à l'expéditeur du message. (Relation: Membre 1:N Message)"
        },
        "destinataireId": {
          "type": "string",
          "description": "Référence au destinataire du message. (Relation: Membre 1:N Message)"
        },
        "contenu": {
          "type": "string",
          "description": "Contenu du message."
        },
        "dateEnvoi": {
          "type": "string",
          "description": "Date d'envoi du message.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "expediteurId",
        "destinataireId",
        "contenu",
        "dateEnvoi"
      ]
    },
    "Review": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Review",
      "type": "object",
      "description": "Représente un avis laissé par un utilisateur pour une annonce.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifiant unique de l'avis."
        },
        "authorId": {
          "type": "string",
          "description": "ID de l'utilisateur qui a laissé l'avis."
        },
        "authorName": {
          "type": "string",
          "description": "Nom de l'utilisateur qui a laissé l'avis."
        },
        "authorImage": {
          "type": "string",
          "description": "URL de l'image de profil de l'auteur.",
          "format": "uri"
        },
        "rating": {
          "type": "number",
          "description": "Note de 1 à 5."
        },
        "comment": {
          "type": "string",
          "description": "Commentaire de l'utilisateur."
        },
        "createdAt": {
          "type": "string",
          "description": "Date de création de l'avis.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "authorId",
        "authorName",
        "rating",
        "comment",
        "createdAt"
      ]
    },
    "Call": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "Call",
        "type": "object",
        "description": "Represents a WebRTC call for signaling.",
        "properties": {
            "id": { "type": "string" },
            "callerId": { "type": "string" },
            "receiverId": { "type": "string" },
            "callerName": { "type": "string" },
            "type": { "enum": ["voice", "video"] },
            "status": { "enum": ["pending", "ongoing", "ended", "missed", "declined"] },
            "offer": { "type": "object" },
            "answer": { "type": "object" },
            "createdAt": { "type": "string", "format": "date-time" }
        },
        "required": ["id", "callerId", "receiverId", "type", "status", "createdAt"]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "description": "Stores all user profiles regardless of role."
      },
      {
        "path": "/wallets/{userId}",
        "description": "Stores user's virtual wallet information."
      },
      {
        "path": "/wallets/{userId}/transactions/{transactionId}",
        "description": "Subcollection for all transactions related to a user's wallet."
      },
      {
        "path": "/services/{serviceId}",
        "description": "Stores service listings (annonces) created by escorte users."
      },
      {
        "path": "/services/{serviceId}/reviews/{reviewId}",
        "description": "Subcollection for reviews on a specific service."
      },
      {
        "path": "/products/{productId}",
        "description": "Stores products for sale, created by creators or partners."
      },
      {
        "path": "/lives/{liveId}",
        "description": "Stores information about live streaming sessions."
      },
      {
        "path": "/blog/{articleId}",
        "description": "Stores blog articles written by creators or admins."
      },
      {
        "path": "/messages/{messageId}",
        "description": "Stores private messages between users."
      },
      {
        "path": "/calls/{callId}",
        "description": "Used for WebRTC signaling to establish video/voice calls."
      },
      {
        "path": "/calls/{callId}/offerCandidates/{candidateId}",
        "description": "ICE candidates from the caller."
      },
      {
        "path": "/calls/{callId}/answerCandidates/{candidateId}",
        "description": "ICE candidates from the receiver."
      },
      {
        "path": "/supportTickets/{ticketId}",
        "description": "Stores user support requests."
      },
      {
        "path": "/settings/global",
        "description": "Stores global application settings."
      }
    ],
    "reasoning": "La structure Firestore est conçue pour prendre en charge une application web complexe mettant en relation différents rôles (membres, escortes, partenaires, administrateurs) tout en assurant la sécurité et la scalabilité. L'accent est mis sur l'indépendance de l'autorisation via la dénormalisation des données et la ségrégation structurelle.  \n\n**Authentification et rôles** :\nLes informations des utilisateurs sont stockées dans des collections séparées par rôle (membres, escortes, partenaires, administrateurs). Cela permet d'appliquer des règles de sécurité spécifiques à chaque rôle. La collection `membres` stocke les informations des clients, tandis que `escortes` et `partenaires` contiennent les données des créateurs de contenu et des entreprises, respectivement. La collection `administrateurs` gère les comptes administrateurs.\n\n**Données privées** :\nLes données privées de chaque utilisateur (par exemple, le portefeuille) sont stockées dans des sous-collections sous le document utilisateur correspondant. Cela garantit que seul l'utilisateur concerné peut accéder à ces données.\n\n**Contenu premium et produits** :\nLe contenu premium créé par les escortes est stocké dans la collection `contenuPremium`. De même, les produits proposés par les partenaires sont stockés dans la collection `produits`. Chaque document contient une référence à l'escorte ou au partenaire correspondant, permettant ainsi de lier les données.\n\n**Réservations** :\nLes réservations sont stockées dans la collection `reservations`. Chaque document contient une référence au membre qui a fait la réservation et au produit réservé.\n\n**Messagerie privée** :\nLes messages privés sont stockés dans une sous-collection `messages` sous chaque utilisateur. Cela permet de gérer facilement les conversations entre utilisateurs.\n\n**Indépendance de l'autorisation** :\nPour garantir l'indépendance de l'autorisation, les données nécessaires pour vérifier les autorisations d'accès sont dénormalisées. Par exemple, si l'accès à un contenu premium dépend du rôle de l'utilisateur, ce rôle est copié dans le document `contenuPremium`. De même, les informations d'appartenance à des groupes ou communautés sont dénormalisées dans les documents correspondants.\n\n**Gestion des listes (QAPs)** :\nPour permettre des opérations de liste sécurisées, la structure est conçue de manière à ce que les règles de sécurité puissent être appliquées sans avoir besoin de filtrer les données côté client. Par exemple, les contenus premium publics et privés sont stockés dans des collections séparées, ce qui permet de définir des règles de sécurité différentes pour chaque collection."
  }
}
