
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['founder', 'administrateur'];
    }

    function isCreatorOrPartner() {
      if (!isSignedIn()) {
        return false;
      }
      let role = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      return role == 'escorte' || role == 'partenaire';
    }

    // --- USERS ---
    // Public read for profiles, but restricted writes.
    match /users/{userId} {
      allow read: if true;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if false; // Do not allow user deletion from client
    }

    // --- POSTS ---
    match /posts/{postId} {
      allow read: if isSignedIn();
      allow create: if isCreatorOrPartner() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if resource.data.authorId == request.auth.uid || isAdmin();

      match /comments/{commentId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow update, delete: if resource.data.authorId == request.auth.uid || isAdmin();
      }
    }

    // --- SERVICES (Annonces), PRODUCTS, BLOG, LIVES ---
    // These collections are publicly readable.
    match /{publicCollection}/{contentId} where publicCollection in ['services', 'products', 'blog', 'lives'] {
      allow read: if true;
      allow create: if isCreatorOrPartner() && request.resource.data.createdBy == request.auth.uid;
      allow update, delete: if resource.data.createdBy == request.auth.uid || isAdmin();

      // Reviews subcollection for services
      match /reviews/{reviewId} {
        allow read: if true;
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow delete: if resource.data.authorId == request.auth.uid || isAdmin();
      }
    }

    // --- WALLETS & TRANSACTIONS ---
    // Wallets are private to the user and admins.
    match /wallets/{userId} {
      allow read, update: if isOwner(userId) || isAdmin();
      allow create: if isOwner(userId);

      match /transactions/{transactionId} {
        allow read, write: if isOwner(userId) || isAdmin();
      }
    }
    
    // --- PURCHASES & RESERVATIONS ---
    // A user can only access reservations or purchases they are part of.
    match /reservations/{reservationId} {
        allow read, update: if isSignedIn() && (resource.data.memberId == request.auth.uid || resource.data.creatorId == request.auth.uid || request.auth.uid in resource.data.escorts);
        allow create: if isSignedIn() && request.resource.data.memberId == request.auth.uid;
        allow delete: if isAdmin();
    }
    match /purchases/{purchaseId} {
        allow read: if isSignedIn() && (resource.data.memberId == request.auth.uid || resource.data.sellerId == request.auth.uid);
        allow create: if isSignedIn() && request.resource.data.memberId == request.auth.uid;
        allow delete: if isAdmin();
    }

    // --- MESSAGES & CALLS ---
    // Users can only read/write messages and calls where they are the sender or receiver.
    match /messages/{messageId} {
        allow read: if isSignedIn() && (resource.data.senderId == request.auth.uid || resource.data.receiverId == request.auth.uid);
        allow write: if isSignedIn() && (
            (request.resource.data.senderId == request.auth.uid || request.resource.data.receiverId == request.auth.uid) || 
            (resource.data.senderId == request.auth.uid || resource.data.receiverId == request.auth.uid)
        );
    }
    match /calls/{callId} {
        allow read: if isSignedIn() && (resource.data.callerId == request.auth.uid || resource.data.receiverId == request.auth.uid);
        allow write: if isSignedIn() && (
            (request.resource.data.callerId == request.auth.uid || request.resource.data.receiverId == request.auth.uid) || 
            (resource.data.callerId == request.auth.uid || resource.data.receiverId == request.auth.uid)
        );
        
        match /{candidateCollection}/{candidateId} {
            allow create: if isSignedIn();
        }
    }
    
    // --- Notifications ---
    // Users can only access their own notifications.
    match /notifications/{notificationId} {
        allow read, write: if isSignedIn() && (resource.data.userId == request.auth.uid || request.resource.data.userId == request.auth.uid);
    }

    // --- Admin-only collections ---
    match /partnerRequests/{requestId} {
        allow read, update: if isAdmin();
        allow create: if true; // Anyone can submit a request
    }
    match /supportTickets/{ticketId} {
        allow read, write: if isSignedIn() && (resource.data.userId == request.auth.uid || isAdmin());
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }
    match /verifications/{userId} {
        allow read, write: if isOwner(userId) || isAdmin();
    }
    
    // --- Global Settings ---
    // Readable by anyone, writable only by admins.
    match /settings/global {
        allow read: if true;
        allow write: if isAdmin();
    }
  }
}
